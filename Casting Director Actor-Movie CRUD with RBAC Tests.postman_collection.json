{
	"info": {
		"_postman_id": "d2ef3c70-e9c3-4589-b961-bd015a3d6e26",
		"name": "Casting Director Actor-Movie CRUD with RBAC Tests",
		"description": "Postman collection for RBAC tests of all actor CRUD operations for the Casting Director role.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8417223"
	},
	"item": [
		{
			"name": "Get All Actors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response contains actors array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.actors).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/actors",
					"host": [
						"{{host}}"
					],
					"path": [
						"actors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Actor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.variables.set(\"actor_id\",pm.response.json().actor_id);",
							"});",
							"pm.test(\"Response contains success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"John Doe\", \"age\": 30, \"gender\": \"male\"}"
				},
				"url": {
					"raw": "{{host}}/actors",
					"host": [
						"{{host}}"
					],
					"path": [
						"actors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Actor by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response contains success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Updated Name\", \"age\": 35}"
				},
				"url": {
					"raw": "{{host}}/actors/{{actor_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"actors",
						"{{actor_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Actor by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response contains success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/actors/{{actor_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"actors",
						"{{actor_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response contains movies array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.movies).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/movies",
					"host": [
						"{{host}}"
					],
					"path": [
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Movie - Not Allowed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403 Forbidden\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/movies",
					"host": [
						"{{host}}"
					],
					"path": [
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Movie by ID - Not Allowed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403 Forbidden\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/movies/{{movie_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"movies",
						"{{movie_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Movie by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response contains success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"title\": \"Forrest Gump\", \"release_date\": \"1994-07-06\"}"
				},
				"url": {
					"raw": "{{host}}/movies/{{movie_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"movies",
						"{{movie_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "YOUR_JWT_TOKEN_HERE",
			"type": "string"
		},
		{
			"key": "actor_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "movie_id",
			"value": "350",
			"type": "string"
		}
	]
}